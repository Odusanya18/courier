security:
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'bcrypt'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        backend_users:
            memory:
                users:
                    admin: { password: '$2y$13$rGk9Tl01oPB8dJ.LgYNTUuTdOVI70TfvvMuHBYWYP0FvCmtbimiBe', roles: ['ROLE_ADMIN'] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider: backend_users
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        main:
            stateless: true
            anonymous: true
            provider: backend_users
            json_login:
                check_path: /authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#        - { path: ^/(api)(?!/media_objects), roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
